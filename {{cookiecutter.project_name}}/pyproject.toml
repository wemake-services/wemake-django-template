[project]
name = "{{ cookiecutter.project_name }}"
description = "{{ cookiecutter.project_verbose_name }}"
version = "0.1.0"
requires-python = ">3.12,<3.13"
readme = "README.md"
authors = []
dynamic = ["dependencies", "classifiers"]


[build-system]
requires = ["poetry-core>=2.0"]
build-backend = "poetry.core.masonry.api"


[tool.poetry]
package-mode = false
classifiers = [
  "Private :: Do not Upload",
]


[tool.poetry.dependencies]
django = { version = "^5.1", extras = ["argon2"] }
django-split-settings = "^1.3"
django-axes = "^7.0"
django-csp = "^3.8"
django-health-check = "^3.18"
django-permissions-policy = "^4.24"
django-stubs-ext = "^5.1"

psycopg2-binary = "^2.9"
gunicorn = "^23.0"
python-decouple = "^3.8"
structlog = "^24.4"
wheel = "^0.45"


[tool.poetry.group.dev.dependencies]
django-debug-toolbar = "^5.0"
django-migration-linter = "^5.1"
django-extra-checks = "^0.16"
django-query-counter = "^0.4"
nplusone = "^1.0"

wemake-python-styleguide = "^1.0"
ruff = "^0.9"
doc8 = "^1.1"

pytest = "^8.3"
pytest-django = "^4.9"
pytest-cov = "^6.0"
covdefaults = "^2.3"
django-coverage-plugin = "^3.1"
pytest-randomly = "^3.16"
pytest-timeout = "^2.3"
django-test-migrations = "^1.3"
hypothesis = "^6.123"

django-stubs = { version = "^5.1", extras = ["compatible-mypy"] }

djlint = "^1.36"
yamllint = "^1.35"
safety = "^3.2"
dotenv-linter = "^0.5"
polint = "^0.4"
dennis = "^1.1"
dump-env = "^1.5"
ipython = "^8.31"

[tool.poetry.group.docs]
optional = true

[tool.poetry.group.docs.dependencies]
sphinx = "^8.1"
sphinx-autodoc-typehints = "^3.0"
tomli = "^2.2"
myst-parser = "^4.0"
furo = "^2024.8"


[tool.djlint]
ignore = "T003,H006,H030,H031"
include = "H017,H035"
indent = 2
blank_line_after_tag = "load,extends"
profile = "django"
max_line_length = 80
format_attribute_template_tags = true


[tool.ruff]
# Ruff config: https://docs.astral.sh/ruff/settings
preview = true
fix = true
target-version = "py312"
line-length = 80

[tool.ruff.format]
quote-style = "single"
docstring-code-format = false

[tool.ruff.lint]
select = [
  "A",    # flake8-builtins
  "B",    # flake8-bugbear
  "C4",   # flake8-comprehensions
  "C90",  # maccabe
  "COM",  # flake8-commas
  "D",    # pydocstyle
  "DTZ",  # flake8-datetimez
  "E",    # pycodestyle
  "ERA",  # flake8-eradicate
  "EXE",  # flake8-executable
  "F",    # pyflakes
  "FBT",  # flake8-boolean-trap
  "FLY",  # pyflint
  "FURB", # refurb
  "G",    # flake8-logging-format
  "I",    # isort
  "ICN",  # flake8-import-conventions
  "ISC",  # flake8-implicit-str-concat
  "LOG",  # flake8-logging
  "N",    # pep8-naming
  "PERF", # perflint
  "PIE",  # flake8-pie
  "PL",   # pylint
  "PT",   # flake8-pytest-style
  "PTH",  # flake8-use-pathlib
  "Q",    # flake8-quotes
  "RET",  # flake8-return
  "RSE",  # flake8-raise
  "RUF",  # ruff
  "S",    # flake8-bandit
  "SIM",  # flake8-simpify
  "SLF",  # flake8-self
  "SLOT", # flake8-slots
  "T100", # flake8-debugger
  "TRY",  # tryceratops
  "UP",   # pyupgrade
  "W",    # pycodestyle
  "YTT",  # flake8-2020
]
ignore = [
  "A005",   # allow to shadow stdlib and builtin module names
  "COM812", # trailing comma, conflicts with `ruff format`
  # Different doc rules that we don't really care about:
  "D100",
  "D104",
  "D106",
  "D203",
  "D212",
  "D401",
  "D404",
  "D405",
  "ISC001",  # implicit string concat conflicts with `ruff format`
  "ISC003",  # prefer explicit string concat over implicit concat
  "PLR09",   # we have our own complexity rules
  "PLR2004", # do not report magic numbers
  "PLR6301", # do not require classmethod / staticmethod when self not used
  "TRY003",  # long exception messages from `tryceratops`
]
external = [ "WPS" ]

# Plugin configs:
flake8-import-conventions.banned-from = [ "ast" ]
flake8-quotes.inline-quotes = "single"
mccabe.max-complexity = 6
pydocstyle.convention = "google"

[tool.ruff.lint.per-file-ignores]
"server/apps/*/migrations/*.py" = ["D101", "E501", "RUF012"]
"server/common/typing/*.py" = ["F401"]
"tests/*.py" = ["S101"]
