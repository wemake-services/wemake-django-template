[project]
name = "wemake-django-template"
description = "Bleeding edge django template focused on code quality and security"
version = "0.1.0"
requires-python = ">=3.12,<3.13"
readme = "README.md"
authors = [
  { name = "Nikita Sobolev", email = "mail@sobolevn.me" },
]
license = "MIT"
dynamic = ["dependencies", "classifiers"]


[build-system]
requires = ["poetry-core>=2.0"]
build-backend = "poetry.core.masonry.api"


[tool.poetry]
package-mode = false
classifiers = [
  "Private :: Do not Upload",
]

[tool.poetry.dependencies]
cookiecutter = "^2.6"
jinja2-git = "^1.4"

[tool.poetry.group.dev.dependencies]
binaryornot = "^0.4"
tomli = "^2.2"

wemake-python-styleguide = "^1.1"
ruff = "^0.11"
docker-image-size-limit = "^2.1"

mypy = "^1.14"

pytest = "^8.3"
pytest-randomly = "^3.16"
pytest-cookies = "^0.7"


[tool.ruff]
# Ruff config: https://docs.astral.sh/ruff/settings
preview = true
fix = true
target-version = "py312"
line-length = 80
extend-exclude = [
  # Internal project:
  '[{][{]cookiecutter.project_name[}][}]',
]

[tool.ruff.format]
quote-style = "single"
docstring-code-format = false

[tool.ruff.lint]
select = [
  "A",    # flake8-builtins
  "B",    # flake8-bugbear
  "C4",   # flake8-comprehensions
  "C90",  # maccabe
  "COM",  # flake8-commas
  "D",    # pydocstyle
  "DTZ",  # flake8-datetimez
  "E",    # pycodestyle
  "ERA",  # flake8-eradicate
  "EXE",  # flake8-executable
  "F",    # pyflakes
  "FBT",  # flake8-boolean-trap
  "FLY",  # pyflint
  "FURB", # refurb
  "G",    # flake8-logging-format
  "I",    # isort
  "ICN",  # flake8-import-conventions
  "ISC",  # flake8-implicit-str-concat
  "LOG",  # flake8-logging
  "N",    # pep8-naming
  "PERF", # perflint
  "PIE",  # flake8-pie
  "PL",   # pylint
  "PT",   # flake8-pytest-style
  "PTH",  # flake8-use-pathlib
  "Q",    # flake8-quotes
  "RET",  # flake8-return
  "RSE",  # flake8-raise
  "RUF",  # ruff
  "S",    # flake8-bandit
  "SIM",  # flake8-simpify
  "SLF",  # flake8-self
  "SLOT", # flake8-slots
  "T100", # flake8-debugger
  "TRY",  # tryceratops
  "UP",   # pyupgrade
  "W",    # pycodestyle
  "YTT",  # flake8-2020
]
ignore = [
  "A005",   # allow to shadow stdlib and builtin module names
  "COM812", # trailing comma, conflicts with `ruff format`
  # Different doc rules that we don't really care about:
  "D100",
  "D104",
  "D106",
  "D203",
  "D212",
  "D401",
  "D404",
  "D405",
  "ISC001",  # implicit string concat conflicts with `ruff format`
  "ISC003",  # prefer explicit string concat over implicit concat
  "PLR09",   # we have our own complexity rules
  "PLR2004", # do not report magic numbers
  "PLR6301", # do not require classmethod / staticmethod when self not used
  "TRY003",  # long exception messages from `tryceratops`
]
external = [ "WPS" ]

# Plugin configs:
flake8-quotes.inline-quotes = "single"
mccabe.max-complexity = 6
pydocstyle.convention = "google"

[tool.ruff.lint.per-file-ignores]
"tests/*.py" = [
  "S101", # asserts
]


[tool.pytest.ini_options]
# pytest config: http://doc.pytest.org/en/latest/customize.html

# Strict `@xfail` by default:
xfail_strict = true
# Fail on warnings:
filterwarnings = ["error"]

addopts = [
  "--strict-config",
  "--strict-markers",
  "--doctest-modules",
  # Custom template parts:
  "--ignore={{cookiecutter.project_name}}",
  "--ignore=hooks",
]


[tool.mypy]
# The mypy configurations: http://bit.ly/2zEl9WI
ignore_missing_imports = true
strict = true
local_partial_types = true
warn_unreachable = true

exclude = [
  '{{cookiecutter.project_name}}',
]

enable_error_code = [
  "truthy-bool",
  "truthy-iterable",
  "redundant-expr",
  "unused-awaitable",
  "ignore-without-code",
  "possibly-undefined",
  "redundant-self",
  "explicit-override",
  "mutable-override",
  "unimported-reveal",
  "deprecated",
]
